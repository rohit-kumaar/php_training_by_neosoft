--> OOPS :- stand Object Oriented Programming Structure. 
  -> Memory management 
  -> Reusability 
  -> sort programming code 
  --> OOps Features 
    -> Class , Object , constructor , destructor , access modifiers , inheritance , polymorphism ,getter - setter , abstract class , final class , interface , magic methods 

      -> class :- It is a group of data member , member function and its properties. class is just like a container where we put our code.
        syntex :
          class ClassName{
            //....
          }
          eg:
         class Person
  {
    var $myname;
     function setName($name){
       $this->myname=$name;
     }
     function getName(){
      echo "The name is ".$this->myname;
     }
 }
 $obj=new Person();
 $obj->setName("Amit");
 $obj->getName();
 -> Constructor :- used to initilize the object it means that if we want to initilize any property when we create an object of a class, then we put into constructor.
   -> in php we define constructor with the help of _ _construct(){}
--> Destructor () :- It is used to cleanup the resources when the object is deleted.
   __destruct() :- no parameter
-> Access Modifiers 
   -> public :- accessible anywhere 
   -> private :- within a class 
   -> protected :- within a class and its derived class

-> Inheritance :- Reusability , to access the base class properties in a child class.
  -> extends keyword is used for inheritance 
    <?php 
 class A {
    protected function abc(){
        return "sumit";
    }
 }
 class B extends A {
    public function bca(){
        $fname1="Amit";
        $fname2=parent::abc();
        echo $fname1." and ".$fname2." are good friends";
    }
 }
 $obj=new B();
 $obj->bca();
 ?>

 -->Function Overloading and Overriding 
   Function Overloading : It is a process in which we can define more then 1 same name function in a class but parameter | arguments are diffrent.But php doesnot support it , if we want to acheive this feature we can acheive with __call() :- magic method.
   eg:
    <?php 
 class A {
    public function __call($met,$arg){
        if($met==="abc"){
            if(count($arg)==1){
                echo "The square is ".($arg[0]*$arg[0]);
            }
            if(count($arg)==2){
                echo "The sum is ".($arg[0]+$arg[1]);
            }
        }
    }
 }
 $obj=new A;
 $obj->abc(5);
 $obj->abc(5,10);
 ?>

 --> Function Overriding :- It is a process in which in both the class same function is define , the parent class function property is override in child class.
  class A {
    function abc(){
     echo "Hello";
    }
  }
  class B extends A {
    function abc(){
      echo "Bye";
    }
  }

  --> abstract class :- It is a class which cant be initilized , if we want to acces the property we need to inherit that class.
   eg:
   abstract class A {
       function abc(){
        echo "Heelo";
       }
     abstract function xyz();
   }
   class B extends A {
     function xyz(){
       //code
     }
   }

   //create object of A 
   $obj=new A;//cant create 

   $obj1=new B;
   $obj1->abc();
   $obj1->xyz();

   --> final class :- which cant be inherited 
    final class classname 
    {
      //
    }

    -> interface :- It is just like a skelaton where we can declare our common methods and variables , they are define where they implements 
      -> implements keyword is used to use interface 
      -> It is a solution of multiple inheritance 

      interface Car{
        public function Details();
      }
      class Ford implements Car {
        function Details(){
          //
        }
      }
       class Maruti implements Car {
        function Details(){
          //
        }
      }